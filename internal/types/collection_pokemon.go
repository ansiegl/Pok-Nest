// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CollectionPokemon collection pokemon
//
// swagger:model collectionPokemon
type CollectionPokemon struct {

	// attack of pokemon
	// Example: 49
	// Required: true
	Attack *int64 `json:"attack"`

	// defense of pokemon
	// Example: 49
	// Required: true
	Defense *int64 `json:"defense"`

	// description of pokemon
	// Example: A strange seed was planted on its back at birth. The plant sprouts and grows with this PokÃ©mon.
	// Required: true
	Description *string `json:"description"`

	// hp of pokemon
	// Example: 45
	// Required: true
	Hp *int64 `json:"hp"`

	// png URL of pokemon
	// Example: https://play.pokemonshowdown.com/sprites/bw/bulbasaur.png
	// Required: true
	ImageURL *string `json:"image_url"`

	// name or nickname of pokemon
	// Example: Bulby
	// Required: true
	NameOrNickname *string `json:"name_or_nickname"`

	// pokedex number
	// Example: 1
	// Required: true
	Number *int64 `json:"number"`

	// id of pokemon
	// Example: ded12a71-9fc3-430f-8259-a6779f1a7f0c
	// Required: true
	// Format: uuid4
	PokemonID *strfmt.UUID4 `json:"pokemon_id"`

	// special stat of pokemon
	// Example: 65
	// Required: true
	Special *int64 `json:"special"`

	// speed of pokemon
	// Example: 45
	// Required: true
	Speed *int64 `json:"speed"`

	// first type of pokemon
	// Example: Grass
	// Required: true
	Type1 *string `json:"type1"`

	// second type of pokemon
	// Example: Poison
	Type2 string `json:"type2,omitempty"`
}

// Validate validates this collection pokemon
func (m *CollectionPokemon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefense(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameOrNickname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePokemonID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpecial(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType1(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CollectionPokemon) validateAttack(formats strfmt.Registry) error {

	if err := validate.Required("attack", "body", m.Attack); err != nil {
		return err
	}

	return nil
}

func (m *CollectionPokemon) validateDefense(formats strfmt.Registry) error {

	if err := validate.Required("defense", "body", m.Defense); err != nil {
		return err
	}

	return nil
}

func (m *CollectionPokemon) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *CollectionPokemon) validateHp(formats strfmt.Registry) error {

	if err := validate.Required("hp", "body", m.Hp); err != nil {
		return err
	}

	return nil
}

func (m *CollectionPokemon) validateImageURL(formats strfmt.Registry) error {

	if err := validate.Required("image_url", "body", m.ImageURL); err != nil {
		return err
	}

	return nil
}

func (m *CollectionPokemon) validateNameOrNickname(formats strfmt.Registry) error {

	if err := validate.Required("name_or_nickname", "body", m.NameOrNickname); err != nil {
		return err
	}

	return nil
}

func (m *CollectionPokemon) validateNumber(formats strfmt.Registry) error {

	if err := validate.Required("number", "body", m.Number); err != nil {
		return err
	}

	return nil
}

func (m *CollectionPokemon) validatePokemonID(formats strfmt.Registry) error {

	if err := validate.Required("pokemon_id", "body", m.PokemonID); err != nil {
		return err
	}

	if err := validate.FormatOf("pokemon_id", "body", "uuid4", m.PokemonID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CollectionPokemon) validateSpecial(formats strfmt.Registry) error {

	if err := validate.Required("special", "body", m.Special); err != nil {
		return err
	}

	return nil
}

func (m *CollectionPokemon) validateSpeed(formats strfmt.Registry) error {

	if err := validate.Required("speed", "body", m.Speed); err != nil {
		return err
	}

	return nil
}

func (m *CollectionPokemon) validateType1(formats strfmt.Registry) error {

	if err := validate.Required("type1", "body", m.Type1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this collection pokemon based on context it is used
func (m *CollectionPokemon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CollectionPokemon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CollectionPokemon) UnmarshalBinary(b []byte) error {
	var res CollectionPokemon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
