// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Collection collection
//
// swagger:model collection
type Collection struct {

	// caught at date
	// Example: 2023-04-15
	// Format: date
	Caught strfmt.Date `json:"caught,omitempty"`

	// nickname of pokemon
	// Example: pika
	Nickname string `json:"nickname,omitempty"`

	// ID of pokemon
	// Example: f14d44a9-86f7-4875-b4db-213cd5b7430b
	// Required: true
	// Format: uuid
	PokemonID *strfmt.UUID `json:"pokemon_id"`

	// ID of user
	// Example: 6e8c36ad-85c9-4f2e-9175-15b87656a93b
	// Required: true
	// Format: uuid
	UserID *strfmt.UUID `json:"user_id"`
}

// Validate validates this collection
func (m *Collection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCaught(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePokemonID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Collection) validateCaught(formats strfmt.Registry) error {
	if swag.IsZero(m.Caught) { // not required
		return nil
	}

	if err := validate.FormatOf("caught", "body", "date", m.Caught.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Collection) validatePokemonID(formats strfmt.Registry) error {

	if err := validate.Required("pokemon_id", "body", m.PokemonID); err != nil {
		return err
	}

	if err := validate.FormatOf("pokemon_id", "body", "uuid", m.PokemonID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Collection) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	if err := validate.FormatOf("user_id", "body", "uuid", m.UserID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this collection based on context it is used
func (m *Collection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Collection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Collection) UnmarshalBinary(b []byte) error {
	var res Collection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
