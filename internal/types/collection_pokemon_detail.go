// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CollectionPokemonDetail collection pokemon detail
//
// swagger:model collectionPokemonDetail
type CollectionPokemonDetail struct {
	CollectionPokemon

	// date when pokemon was caught
	// Example: 2024-03-30
	// Required: true
	// Format: date
	Caught *strfmt.Date `json:"caught"`

	// gif URL of pokemon
	// Example: https://play.pokemonshowdown.com/sprites/bwani/bulbasaur.gif
	GifURL string `json:"gif_url,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CollectionPokemonDetail) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CollectionPokemon
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CollectionPokemon = aO0

	// AO1
	var dataAO1 struct {
		Caught *strfmt.Date `json:"caught"`

		GifURL string `json:"gif_url,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Caught = dataAO1.Caught

	m.GifURL = dataAO1.GifURL

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CollectionPokemonDetail) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CollectionPokemon)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Caught *strfmt.Date `json:"caught"`

		GifURL string `json:"gif_url,omitempty"`
	}

	dataAO1.Caught = m.Caught

	dataAO1.GifURL = m.GifURL

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this collection pokemon detail
func (m *CollectionPokemonDetail) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CollectionPokemon
	if err := m.CollectionPokemon.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCaught(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CollectionPokemonDetail) validateCaught(formats strfmt.Registry) error {

	if err := validate.Required("caught", "body", m.Caught); err != nil {
		return err
	}

	if err := validate.FormatOf("caught", "body", "date", m.Caught.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this collection pokemon detail based on the context it is used
func (m *CollectionPokemonDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CollectionPokemon
	if err := m.CollectionPokemon.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *CollectionPokemonDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CollectionPokemonDetail) UnmarshalBinary(b []byte) error {
	var res CollectionPokemonDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
