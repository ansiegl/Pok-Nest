// Code generated by go-swagger; DO NOT EDIT.

package pokemon

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetPokemonAsJSONParams creates a new GetPokemonAsJSONParams object
// with the default values initialized.
func NewGetPokemonAsJSONParams() GetPokemonAsJSONParams {

	var (
		// initialize parameters with default values

		limitDefault = int64(10)

		offsetDefault = int64(0)
	)

	return GetPokemonAsJSONParams{
		Limit: &limitDefault,

		Offset: &offsetDefault,
	}
}

// GetPokemonAsJSONParams contains all the bound params for the get pokemon as Json operation
// typically these are obtained from a http.Request
//
// swagger:parameters getPokemonAsJson
type GetPokemonAsJSONParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*pokemon generation to search for
	  In: query
	*/
	Generation *int64 `query:"generation"`
	/*whether to search for legendary pokemon
	  In: query
	*/
	Legendary *bool `query:"legendary"`
	/*number of pokemon to return per page
	  Maximum: 20
	  In: query
	  Default: 10
	*/
	Limit *int64 `query:"limit"`
	/*name of pokemon
	  In: query
	*/
	Name *string `query:"name"`
	/*number of pokemon to skip before returning results
	  Minimum: 0
	  In: query
	  Default: 0
	*/
	Offset *int64 `query:"offset"`
	/*order for the results ("asc" ascending, "desc" descending)
	  In: query
	*/
	SortOrder *string `query:"sortOrder"`
	/*pokemon type to search for
	  In: query
	*/
	Type *string `query:"type"`
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetPokemonAsJSONParams() beforehand.
func (o *GetPokemonAsJSONParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qGeneration, qhkGeneration, _ := qs.GetOK("generation")
	if err := o.bindGeneration(qGeneration, qhkGeneration, route.Formats); err != nil {
		res = append(res, err)
	}

	qLegendary, qhkLegendary, _ := qs.GetOK("legendary")
	if err := o.bindLegendary(qLegendary, qhkLegendary, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qName, qhkName, _ := qs.GetOK("name")
	if err := o.bindName(qName, qhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortOrder, qhkSortOrder, _ := qs.GetOK("sortOrder")
	if err := o.bindSortOrder(qSortOrder, qhkSortOrder, route.Formats); err != nil {
		res = append(res, err)
	}

	qType, qhkType, _ := qs.GetOK("type")
	if err := o.bindType(qType, qhkType, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPokemonAsJSONParams) Validate(formats strfmt.Registry) error {
	var res []error

	// generation
	// Required: false
	// AllowEmptyValue: false

	// legendary
	// Required: false
	// AllowEmptyValue: false

	// limit
	// Required: false
	// AllowEmptyValue: false

	if err := o.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	// name
	// Required: false
	// AllowEmptyValue: false

	// offset
	// Required: false
	// AllowEmptyValue: false

	if err := o.validateOffset(formats); err != nil {
		res = append(res, err)
	}

	// sortOrder
	// Required: false
	// AllowEmptyValue: false

	if err := o.validateSortOrder(formats); err != nil {
		res = append(res, err)
	}

	// type
	// Required: false
	// AllowEmptyValue: false

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindGeneration binds and validates parameter Generation from query.
func (o *GetPokemonAsJSONParams) bindGeneration(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("generation", "query", "int64", raw)
	}
	o.Generation = &value

	return nil
}

// bindLegendary binds and validates parameter Legendary from query.
func (o *GetPokemonAsJSONParams) bindLegendary(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("legendary", "query", "bool", raw)
	}
	o.Legendary = &value

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetPokemonAsJSONParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetPokemonAsJSONParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	if err := o.validateLimit(formats); err != nil {
		return err
	}

	return nil
}

// validateLimit carries on validations for parameter Limit
func (o *GetPokemonAsJSONParams) validateLimit(formats strfmt.Registry) error {

	// Required: false
	if o.Limit == nil {
		return nil
	}

	if err := validate.MaximumInt("limit", "query", *o.Limit, 20, false); err != nil {
		return err
	}

	return nil
}

// bindName binds and validates parameter Name from query.
func (o *GetPokemonAsJSONParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Name = &raw

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *GetPokemonAsJSONParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetPokemonAsJSONParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	if err := o.validateOffset(formats); err != nil {
		return err
	}

	return nil
}

// validateOffset carries on validations for parameter Offset
func (o *GetPokemonAsJSONParams) validateOffset(formats strfmt.Registry) error {

	// Required: false
	if o.Offset == nil {
		return nil
	}

	if err := validate.MinimumInt("offset", "query", *o.Offset, 0, false); err != nil {
		return err
	}

	return nil
}

// bindSortOrder binds and validates parameter SortOrder from query.
func (o *GetPokemonAsJSONParams) bindSortOrder(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.SortOrder = &raw

	if err := o.validateSortOrder(formats); err != nil {
		return err
	}

	return nil
}

// validateSortOrder carries on validations for parameter SortOrder
func (o *GetPokemonAsJSONParams) validateSortOrder(formats strfmt.Registry) error {

	// Required: false
	if o.SortOrder == nil {
		return nil
	}

	if err := validate.EnumCase("sortOrder", "query", *o.SortOrder, []interface{}{"asc", "desc"}, true); err != nil {
		return err
	}

	return nil
}

// bindType binds and validates parameter Type from query.
func (o *GetPokemonAsJSONParams) bindType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Type = &raw

	return nil
}
