// Code generated by go-swagger; DO NOT EDIT.

package pokemon

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetPokemonAsJSONParams creates a new GetPokemonAsJSONParams object
// with the default values initialized.
func NewGetPokemonAsJSONParams() GetPokemonAsJSONParams {

	var (
		// initialize parameters with default values

		limitDefault = int64(10)
	)

	return GetPokemonAsJSONParams{
		Limit: &limitDefault,
	}
}

// GetPokemonAsJSONParams contains all the bound params for the get pokemon as Json operation
// typically these are obtained from a http.Request
//
// swagger:parameters getPokemonAsJson
type GetPokemonAsJSONParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The number of PokÃ©mon to return per page (default is 10)
	  Maximum: 20
	  In: query
	  Default: 10
	*/
	Limit *int64 `query:"limit"`
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetPokemonAsJSONParams() beforehand.
func (o *GetPokemonAsJSONParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPokemonAsJSONParams) Validate(formats strfmt.Registry) error {
	var res []error

	// limit
	// Required: false
	// AllowEmptyValue: false

	if err := o.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetPokemonAsJSONParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetPokemonAsJSONParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	if err := o.validateLimit(formats); err != nil {
		return err
	}

	return nil
}

// validateLimit carries on validations for parameter Limit
func (o *GetPokemonAsJSONParams) validateLimit(formats strfmt.Registry) error {

	// Required: false
	if o.Limit == nil {
		return nil
	}

	if err := validate.MaximumInt("limit", "query", *o.Limit, 20, false); err != nil {
		return err
	}

	return nil
}
