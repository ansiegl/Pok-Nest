// Code generated by go-swagger; DO NOT EDIT.

package pokemon

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ansiegl/Pok-Nest.git/internal/types"
)

// NewPostSearchPokemonParams creates a new PostSearchPokemonParams object
// with the default values initialized.
func NewPostSearchPokemonParams() PostSearchPokemonParams {

	var (
		// initialize parameters with default values

		limitDefault  = int64(10)
		offsetDefault = int64(0)
	)

	return PostSearchPokemonParams{
		Limit: &limitDefault,

		Offset: &offsetDefault,
	}
}

// PostSearchPokemonParams contains all the bound params for the post search pokemon operation
// typically these are obtained from a http.Request
//
// swagger:parameters postSearchPokemon
type PostSearchPokemonParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: body
	*/
	Body *types.PokemonSearchRequest
	/*number of pokemon to return per page
	  Maximum: 20
	  In: query
	  Default: 10
	*/
	Limit *int64 `query:"limit"`
	/*number of pokemon to skip before returning results
	  Minimum: 0
	  In: query
	  Default: 0
	*/
	Offset *int64 `query:"offset"`
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostSearchPokemonParams() beforehand.
func (o *PostSearchPokemonParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body types.PokemonSearchRequest
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("body", "body", "", err))
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = &body
			}
		}
	}
	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSearchPokemonParams) Validate(formats strfmt.Registry) error {
	var res []error

	// body
	// Required: false

	// body is validated in endpoint
	//if err := o.Body.Validate(formats); err != nil {
	//  res = append(res, err)
	//}

	// limit
	// Required: false
	// AllowEmptyValue: false

	if err := o.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	// offset
	// Required: false
	// AllowEmptyValue: false

	if err := o.validateOffset(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *PostSearchPokemonParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostSearchPokemonParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	if err := o.validateLimit(formats); err != nil {
		return err
	}

	return nil
}

// validateLimit carries on validations for parameter Limit
func (o *PostSearchPokemonParams) validateLimit(formats strfmt.Registry) error {

	// Required: false
	if o.Limit == nil {
		return nil
	}

	if err := validate.MaximumInt("limit", "query", *o.Limit, 20, false); err != nil {
		return err
	}

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *PostSearchPokemonParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostSearchPokemonParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	if err := o.validateOffset(formats); err != nil {
		return err
	}

	return nil
}

// validateOffset carries on validations for parameter Offset
func (o *PostSearchPokemonParams) validateOffset(formats strfmt.Registry) error {

	// Required: false
	if o.Offset == nil {
		return nil
	}

	if err := validate.MinimumInt("offset", "query", *o.Offset, 0, false); err != nil {
		return err
	}

	return nil
}
