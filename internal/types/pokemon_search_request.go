// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PokemonSearchRequest pokemon search request
//
// swagger:model pokemonSearchRequest
type PokemonSearchRequest struct {

	// filter by attack
	// Example: 60
	Attack int64 `json:"attack,omitempty"`

	// filter by defense
	// Example: 40
	Defense int64 `json:"defense,omitempty"`

	// filter by hp
	// Example: 50
	Hp int64 `json:"hp,omitempty"`

	// filter by pokemon name
	// Example: Bulbasaur
	Name string `json:"name,omitempty"`

	// pagination
	Pagination *Pagination `json:"pagination,omitempty"`

	// sort order for results
	// Example: asc
	// Enum: [asc desc]
	SortOrder string `json:"sortOrder,omitempty"`

	// filter by special stat
	// Example: 65
	Special int64 `json:"special,omitempty"`

	// filter by speed
	// Example: 45
	Speed int64 `json:"speed,omitempty"`

	// filter by type
	// Example: Grass
	Type string `json:"type,omitempty"`
}

// Validate validates this pokemon search request
func (m *PokemonSearchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortOrder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PokemonSearchRequest) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(m.Pagination) { // not required
		return nil
	}

	if m.Pagination != nil {
		if err := m.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

var pokemonSearchRequestTypeSortOrderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["asc","desc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pokemonSearchRequestTypeSortOrderPropEnum = append(pokemonSearchRequestTypeSortOrderPropEnum, v)
	}
}

const (

	// PokemonSearchRequestSortOrderAsc captures enum value "asc"
	PokemonSearchRequestSortOrderAsc string = "asc"

	// PokemonSearchRequestSortOrderDesc captures enum value "desc"
	PokemonSearchRequestSortOrderDesc string = "desc"
)

// prop value enum
func (m *PokemonSearchRequest) validateSortOrderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pokemonSearchRequestTypeSortOrderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PokemonSearchRequest) validateSortOrder(formats strfmt.Registry) error {
	if swag.IsZero(m.SortOrder) { // not required
		return nil
	}

	// value enum
	if err := m.validateSortOrderEnum("sortOrder", "body", m.SortOrder); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this pokemon search request based on the context it is used
func (m *PokemonSearchRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PokemonSearchRequest) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if m.Pagination != nil {
		if err := m.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PokemonSearchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PokemonSearchRequest) UnmarshalBinary(b []byte) error {
	var res PokemonSearchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
