// Code generated by go-swagger; DO NOT EDIT.

package collection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetSortedCollectionParams creates a new GetSortedCollectionParams object
// no default values defined in spec.
func NewGetSortedCollectionParams() GetSortedCollectionParams {

	return GetSortedCollectionParams{}
}

// GetSortedCollectionParams contains all the bound params for the get sorted collection operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetSortedCollection
type GetSortedCollectionParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The order of sorting (ascending or descending)
	  Required: true
	  In: query
	*/
	Order string `query:"order"`
	/*The field by which to sort the collection (e.g., `name`, `caught`, `type_1`, `type_2`)
	  Required: true
	  In: query
	*/
	SortBy string `query:"sortBy"`
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetSortedCollectionParams() beforehand.
func (o *GetSortedCollectionParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qOrder, qhkOrder, _ := qs.GetOK("order")
	if err := o.bindOrder(qOrder, qhkOrder, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortBy, qhkSortBy, _ := qs.GetOK("sortBy")
	if err := o.bindSortBy(qSortBy, qhkSortBy, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSortedCollectionParams) Validate(formats strfmt.Registry) error {
	var res []error

	// order
	// Required: true
	// AllowEmptyValue: false
	if err := validate.Required("order", "query", o.Order); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	// sortBy
	// Required: true
	// AllowEmptyValue: false
	if err := validate.Required("sortBy", "query", o.SortBy); err != nil {
		res = append(res, err)
	}

	if err := o.validateSortBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindOrder binds and validates parameter Order from query.
func (o *GetSortedCollectionParams) bindOrder(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("order", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("order", "query", raw); err != nil {
		return err
	}

	o.Order = raw

	if err := o.validateOrder(formats); err != nil {
		return err
	}

	return nil
}

// validateOrder carries on validations for parameter Order
func (o *GetSortedCollectionParams) validateOrder(formats strfmt.Registry) error {

	if err := validate.EnumCase("order", "query", o.Order, []interface{}{"asc", "desc"}, true); err != nil {
		return err
	}

	return nil
}

// bindSortBy binds and validates parameter SortBy from query.
func (o *GetSortedCollectionParams) bindSortBy(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("sortBy", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("sortBy", "query", raw); err != nil {
		return err
	}

	o.SortBy = raw

	if err := o.validateSortBy(formats); err != nil {
		return err
	}

	return nil
}

// validateSortBy carries on validations for parameter SortBy
func (o *GetSortedCollectionParams) validateSortBy(formats strfmt.Registry) error {

	if err := validate.EnumCase("sortBy", "query", o.SortBy, []interface{}{"name", "caught", "type_1", "type_2"}, true); err != nil {
		return err
	}

	return nil
}
