// Code generated by go-swagger; DO NOT EDIT.

package collection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"

	"github.com/ansiegl/Pok-Nest.git/internal/types"
)

// NewPostAddPokemonToCollectionParams creates a new PostAddPokemonToCollectionParams object
// no default values defined in spec.
func NewPostAddPokemonToCollectionParams() PostAddPokemonToCollectionParams {

	return PostAddPokemonToCollectionParams{}
}

// PostAddPokemonToCollectionParams contains all the bound params for the post add pokemon to collection operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostAddPokemonToCollection
type PostAddPokemonToCollectionParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: body
	*/
	Caught *types.GetPokemonByIDOKBody
	/*The PokÃ©mon's ID to add to the collection
	  Required: true
	  In: path
	*/
	PokemonID string `param:"pokemonId"`
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostAddPokemonToCollectionParams() beforehand.
func (o *PostAddPokemonToCollectionParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body types.GetPokemonByIDOKBody
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("caught", "body", "", err))
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Caught = &body
			}
		}
	}
	rPokemonID, rhkPokemonID, _ := route.Params.GetOK("pokemonId")
	if err := o.bindPokemonID(rPokemonID, rhkPokemonID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostAddPokemonToCollectionParams) Validate(formats strfmt.Registry) error {
	var res []error

	// caught
	// Required: false

	// body is validated in endpoint
	//if err := o.Caught.Validate(formats); err != nil {
	//  res = append(res, err)
	//}

	// pokemonId
	// Required: true
	// Parameter is provided by construction from the route

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindPokemonID binds and validates parameter PokemonID from path.
func (o *PostAddPokemonToCollectionParams) bindPokemonID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.PokemonID = raw

	return nil
}
