// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Pokemon pokemon
//
// swagger:model pokemon
type Pokemon struct {

	// generation of the pokemon
	// Example: 1
	Generation int64 `json:"generation,omitempty"`

	// is the pokemon legendary?
	// Example: false
	Legendary bool `json:"legendary,omitempty"`

	// name of the pokemon
	// Example: Pikachu
	// Required: true
	Name *string `json:"name"`

	// ID of the pokemon
	// Example: 891d37d3-c74f-493e-aea8-af73efd92016
	// Required: true
	// Format: uuid4
	PokemonID *strfmt.UUID4 `json:"pokemon_id"`

	// first type of the pokemon
	// Example: Electric
	// Required: true
	Type1 *string `json:"type1"`

	// second type of the pokemon
	// Example: Flying
	Type2 string `json:"type2,omitempty"`
}

// Validate validates this pokemon
func (m *Pokemon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePokemonID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType1(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Pokemon) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Pokemon) validatePokemonID(formats strfmt.Registry) error {

	if err := validate.Required("pokemon_id", "body", m.PokemonID); err != nil {
		return err
	}

	if err := validate.FormatOf("pokemon_id", "body", "uuid4", m.PokemonID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Pokemon) validateType1(formats strfmt.Registry) error {

	if err := validate.Required("type1", "body", m.Type1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this pokemon based on context it is used
func (m *Pokemon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Pokemon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Pokemon) UnmarshalBinary(b []byte) error {
	var res Pokemon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
