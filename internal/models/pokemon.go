// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Pokemon is an object representing the database table.
type Pokemon struct {
	PokemonID  string `boil:"pokemon_id" json:"pokemon_id" toml:"pokemon_id" yaml:"pokemon_id"`
	Name       string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Type1      string `boil:"type_1" json:"type_1" toml:"type_1" yaml:"type_1"`
	Type2      string `boil:"type_2" json:"type_2" toml:"type_2" yaml:"type_2"`
	Generation int    `boil:"generation" json:"generation" toml:"generation" yaml:"generation"`
	Legendary  bool   `boil:"legendary" json:"legendary" toml:"legendary" yaml:"legendary"`

	R *pokemonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pokemonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PokemonColumns = struct {
	PokemonID  string
	Name       string
	Type1      string
	Type2      string
	Generation string
	Legendary  string
}{
	PokemonID:  "pokemon_id",
	Name:       "name",
	Type1:      "type_1",
	Type2:      "type_2",
	Generation: "generation",
	Legendary:  "legendary",
}

var PokemonTableColumns = struct {
	PokemonID  string
	Name       string
	Type1      string
	Type2      string
	Generation string
	Legendary  string
}{
	PokemonID:  "pokemon.pokemon_id",
	Name:       "pokemon.name",
	Type1:      "pokemon.type_1",
	Type2:      "pokemon.type_2",
	Generation: "pokemon.generation",
	Legendary:  "pokemon.legendary",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var PokemonWhere = struct {
	PokemonID  whereHelperstring
	Name       whereHelperstring
	Type1      whereHelperstring
	Type2      whereHelperstring
	Generation whereHelperint
	Legendary  whereHelperbool
}{
	PokemonID:  whereHelperstring{field: "\"pokemon\".\"pokemon_id\""},
	Name:       whereHelperstring{field: "\"pokemon\".\"name\""},
	Type1:      whereHelperstring{field: "\"pokemon\".\"type_1\""},
	Type2:      whereHelperstring{field: "\"pokemon\".\"type_2\""},
	Generation: whereHelperint{field: "\"pokemon\".\"generation\""},
	Legendary:  whereHelperbool{field: "\"pokemon\".\"legendary\""},
}

// PokemonRels is where relationship names are stored.
var PokemonRels = struct {
	CollectionPokemons string
}{
	CollectionPokemons: "CollectionPokemons",
}

// pokemonR is where relationships are stored.
type pokemonR struct {
	CollectionPokemons CollectionPokemonSlice `boil:"CollectionPokemons" json:"CollectionPokemons" toml:"CollectionPokemons" yaml:"CollectionPokemons"`
}

// NewStruct creates a new relationship struct
func (*pokemonR) NewStruct() *pokemonR {
	return &pokemonR{}
}

func (r *pokemonR) GetCollectionPokemons() CollectionPokemonSlice {
	if r == nil {
		return nil
	}
	return r.CollectionPokemons
}

// pokemonL is where Load methods for each relationship are stored.
type pokemonL struct{}

var (
	pokemonAllColumns            = []string{"pokemon_id", "name", "type_1", "type_2", "generation", "legendary"}
	pokemonColumnsWithoutDefault = []string{"name", "type_1", "type_2", "generation", "legendary"}
	pokemonColumnsWithDefault    = []string{"pokemon_id"}
	pokemonPrimaryKeyColumns     = []string{"pokemon_id"}
	pokemonGeneratedColumns      = []string{}
)

type (
	// PokemonSlice is an alias for a slice of pointers to Pokemon.
	// This should almost always be used instead of []Pokemon.
	PokemonSlice []*Pokemon

	pokemonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pokemonType                 = reflect.TypeOf(&Pokemon{})
	pokemonMapping              = queries.MakeStructMapping(pokemonType)
	pokemonPrimaryKeyMapping, _ = queries.BindMapping(pokemonType, pokemonMapping, pokemonPrimaryKeyColumns)
	pokemonInsertCacheMut       sync.RWMutex
	pokemonInsertCache          = make(map[string]insertCache)
	pokemonUpdateCacheMut       sync.RWMutex
	pokemonUpdateCache          = make(map[string]updateCache)
	pokemonUpsertCacheMut       sync.RWMutex
	pokemonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single pokemon record from the query.
func (q pokemonQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Pokemon, error) {
	o := &Pokemon{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for pokemon")
	}

	return o, nil
}

// All returns all Pokemon records from the query.
func (q pokemonQuery) All(ctx context.Context, exec boil.ContextExecutor) (PokemonSlice, error) {
	var o []*Pokemon

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Pokemon slice")
	}

	return o, nil
}

// Count returns the count of all Pokemon records in the query.
func (q pokemonQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count pokemon rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pokemonQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if pokemon exists")
	}

	return count > 0, nil
}

// CollectionPokemons retrieves all the collection_pokemon's CollectionPokemons with an executor.
func (o *Pokemon) CollectionPokemons(mods ...qm.QueryMod) collectionPokemonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"collection_pokemon\".\"pokemon_id\"=?", o.PokemonID),
	)

	return CollectionPokemons(queryMods...)
}

// LoadCollectionPokemons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pokemonL) LoadCollectionPokemons(ctx context.Context, e boil.ContextExecutor, singular bool, maybePokemon interface{}, mods queries.Applicator) error {
	var slice []*Pokemon
	var object *Pokemon

	if singular {
		var ok bool
		object, ok = maybePokemon.(*Pokemon)
		if !ok {
			object = new(Pokemon)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePokemon)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePokemon))
			}
		}
	} else {
		s, ok := maybePokemon.(*[]*Pokemon)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePokemon)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePokemon))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pokemonR{}
		}
		args[object.PokemonID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pokemonR{}
			}
			args[obj.PokemonID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`collection_pokemon`),
		qm.WhereIn(`collection_pokemon.pokemon_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load collection_pokemon")
	}

	var resultSlice []*CollectionPokemon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice collection_pokemon")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on collection_pokemon")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collection_pokemon")
	}

	if singular {
		object.R.CollectionPokemons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &collectionPokemonR{}
			}
			foreign.R.Pokemon = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PokemonID == foreign.PokemonID {
				local.R.CollectionPokemons = append(local.R.CollectionPokemons, foreign)
				if foreign.R == nil {
					foreign.R = &collectionPokemonR{}
				}
				foreign.R.Pokemon = local
				break
			}
		}
	}

	return nil
}

// AddCollectionPokemons adds the given related objects to the existing relationships
// of the pokemon, optionally inserting them as new records.
// Appends related to o.R.CollectionPokemons.
// Sets related.R.Pokemon appropriately.
func (o *Pokemon) AddCollectionPokemons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CollectionPokemon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PokemonID = o.PokemonID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"collection_pokemon\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"pokemon_id"}),
				strmangle.WhereClause("\"", "\"", 2, collectionPokemonPrimaryKeyColumns),
			)
			values := []interface{}{o.PokemonID, rel.PokemonID, rel.UserID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PokemonID = o.PokemonID
		}
	}

	if o.R == nil {
		o.R = &pokemonR{
			CollectionPokemons: related,
		}
	} else {
		o.R.CollectionPokemons = append(o.R.CollectionPokemons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &collectionPokemonR{
				Pokemon: o,
			}
		} else {
			rel.R.Pokemon = o
		}
	}
	return nil
}

// Pokemons retrieves all the records using an executor.
func Pokemons(mods ...qm.QueryMod) pokemonQuery {
	mods = append(mods, qm.From("\"pokemon\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"pokemon\".*"})
	}

	return pokemonQuery{q}
}

// FindPokemon retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPokemon(ctx context.Context, exec boil.ContextExecutor, pokemonID string, selectCols ...string) (*Pokemon, error) {
	pokemonObj := &Pokemon{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pokemon\" where \"pokemon_id\"=$1", sel,
	)

	q := queries.Raw(query, pokemonID)

	err := q.Bind(ctx, exec, pokemonObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from pokemon")
	}

	return pokemonObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Pokemon) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pokemon provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(pokemonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pokemonInsertCacheMut.RLock()
	cache, cached := pokemonInsertCache[key]
	pokemonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pokemonAllColumns,
			pokemonColumnsWithDefault,
			pokemonColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pokemonType, pokemonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pokemonType, pokemonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pokemon\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pokemon\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into pokemon")
	}

	if !cached {
		pokemonInsertCacheMut.Lock()
		pokemonInsertCache[key] = cache
		pokemonInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Pokemon.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Pokemon) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	pokemonUpdateCacheMut.RLock()
	cache, cached := pokemonUpdateCache[key]
	pokemonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pokemonAllColumns,
			pokemonPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update pokemon, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pokemon\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pokemonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pokemonType, pokemonMapping, append(wl, pokemonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update pokemon row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for pokemon")
	}

	if !cached {
		pokemonUpdateCacheMut.Lock()
		pokemonUpdateCache[key] = cache
		pokemonUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q pokemonQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for pokemon")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for pokemon")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PokemonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pokemonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pokemon\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pokemonPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pokemon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pokemon")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Pokemon) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no pokemon provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(pokemonColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pokemonUpsertCacheMut.RLock()
	cache, cached := pokemonUpsertCache[key]
	pokemonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			pokemonAllColumns,
			pokemonColumnsWithDefault,
			pokemonColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pokemonAllColumns,
			pokemonPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert pokemon, could not build update column list")
		}

		ret := strmangle.SetComplement(pokemonAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(pokemonPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert pokemon, could not build conflict column list")
			}

			conflict = make([]string, len(pokemonPrimaryKeyColumns))
			copy(conflict, pokemonPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pokemon\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(pokemonType, pokemonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pokemonType, pokemonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert pokemon")
	}

	if !cached {
		pokemonUpsertCacheMut.Lock()
		pokemonUpsertCache[key] = cache
		pokemonUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Pokemon record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Pokemon) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Pokemon provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pokemonPrimaryKeyMapping)
	sql := "DELETE FROM \"pokemon\" WHERE \"pokemon_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from pokemon")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for pokemon")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pokemonQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pokemonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pokemon")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pokemon")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PokemonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pokemonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pokemon\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pokemonPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pokemon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pokemon")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Pokemon) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPokemon(ctx, exec, o.PokemonID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PokemonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PokemonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pokemonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pokemon\".* FROM \"pokemon\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pokemonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PokemonSlice")
	}

	*o = slice

	return nil
}

// PokemonExists checks if the Pokemon row exists.
func PokemonExists(ctx context.Context, exec boil.ContextExecutor, pokemonID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pokemon\" where \"pokemon_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, pokemonID)
	}
	row := exec.QueryRowContext(ctx, sql, pokemonID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if pokemon exists")
	}

	return exists, nil
}

// Exists checks if the Pokemon row exists.
func (o *Pokemon) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PokemonExists(ctx, exec, o.PokemonID)
}
