// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPokemons(t *testing.T) {
	t.Parallel()

	query := Pokemons()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPokemonsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pokemon{}
	if err = randomize.Struct(seed, o, pokemonDBTypes, true, pokemonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pokemons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPokemonsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pokemon{}
	if err = randomize.Struct(seed, o, pokemonDBTypes, true, pokemonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Pokemons().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pokemons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPokemonsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pokemon{}
	if err = randomize.Struct(seed, o, pokemonDBTypes, true, pokemonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PokemonSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pokemons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPokemonsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pokemon{}
	if err = randomize.Struct(seed, o, pokemonDBTypes, true, pokemonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PokemonExists(ctx, tx, o.PokemonID)
	if err != nil {
		t.Errorf("Unable to check if Pokemon exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PokemonExists to return true, but got false.")
	}
}

func testPokemonsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pokemon{}
	if err = randomize.Struct(seed, o, pokemonDBTypes, true, pokemonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pokemonFound, err := FindPokemon(ctx, tx, o.PokemonID)
	if err != nil {
		t.Error(err)
	}

	if pokemonFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPokemonsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pokemon{}
	if err = randomize.Struct(seed, o, pokemonDBTypes, true, pokemonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Pokemons().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPokemonsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pokemon{}
	if err = randomize.Struct(seed, o, pokemonDBTypes, true, pokemonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Pokemons().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPokemonsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pokemonOne := &Pokemon{}
	pokemonTwo := &Pokemon{}
	if err = randomize.Struct(seed, pokemonOne, pokemonDBTypes, false, pokemonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}
	if err = randomize.Struct(seed, pokemonTwo, pokemonDBTypes, false, pokemonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pokemonOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pokemonTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Pokemons().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPokemonsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pokemonOne := &Pokemon{}
	pokemonTwo := &Pokemon{}
	if err = randomize.Struct(seed, pokemonOne, pokemonDBTypes, false, pokemonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}
	if err = randomize.Struct(seed, pokemonTwo, pokemonDBTypes, false, pokemonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pokemonOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pokemonTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pokemons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testPokemonsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pokemon{}
	if err = randomize.Struct(seed, o, pokemonDBTypes, true, pokemonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pokemons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPokemonsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pokemon{}
	if err = randomize.Struct(seed, o, pokemonDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pokemonColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Pokemons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPokemonToManyCollectionPokemons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pokemon
	var b, c CollectionPokemon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pokemonDBTypes, true, pokemonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, collectionPokemonDBTypes, false, collectionPokemonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, collectionPokemonDBTypes, false, collectionPokemonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PokemonID = a.PokemonID
	c.PokemonID = a.PokemonID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CollectionPokemons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PokemonID == b.PokemonID {
			bFound = true
		}
		if v.PokemonID == c.PokemonID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PokemonSlice{&a}
	if err = a.L.LoadCollectionPokemons(ctx, tx, false, (*[]*Pokemon)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CollectionPokemons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CollectionPokemons = nil
	if err = a.L.LoadCollectionPokemons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CollectionPokemons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPokemonToManyAddOpCollectionPokemons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pokemon
	var b, c, d, e CollectionPokemon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pokemonDBTypes, false, strmangle.SetComplement(pokemonPrimaryKeyColumns, pokemonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CollectionPokemon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, collectionPokemonDBTypes, false, strmangle.SetComplement(collectionPokemonPrimaryKeyColumns, collectionPokemonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CollectionPokemon{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCollectionPokemons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PokemonID != first.PokemonID {
			t.Error("foreign key was wrong value", a.PokemonID, first.PokemonID)
		}
		if a.PokemonID != second.PokemonID {
			t.Error("foreign key was wrong value", a.PokemonID, second.PokemonID)
		}

		if first.R.Pokemon != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Pokemon != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CollectionPokemons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CollectionPokemons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CollectionPokemons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPokemonsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pokemon{}
	if err = randomize.Struct(seed, o, pokemonDBTypes, true, pokemonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPokemonsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pokemon{}
	if err = randomize.Struct(seed, o, pokemonDBTypes, true, pokemonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PokemonSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPokemonsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pokemon{}
	if err = randomize.Struct(seed, o, pokemonDBTypes, true, pokemonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Pokemons().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pokemonDBTypes = map[string]string{`PokemonID`: `uuid`, `Name`: `text`, `Type1`: `enum.pokemon_type('Fire','Water','Grass','Electric','Psychic','Ghost','Dragon','Fairy','Flying','Dark','Fighting','Bug','Normal','Rock','Ground','Poison','Steel','Ice')`, `Type2`: `enum.pokemon_type('Fire','Water','Grass','Electric','Psychic','Ghost','Dragon','Fairy','Flying','Dark','Fighting','Bug','Normal','Rock','Ground','Poison','Steel','Ice')`, `HP`: `integer`, `Attack`: `integer`, `Defense`: `integer`, `Speed`: `integer`, `Special`: `integer`, `GifURL`: `text`, `PNGURL`: `text`, `Description`: `text`}
	_              = bytes.MinRead
)

func testPokemonsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pokemonPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pokemonAllColumns) == len(pokemonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Pokemon{}
	if err = randomize.Struct(seed, o, pokemonDBTypes, true, pokemonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pokemons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pokemonDBTypes, true, pokemonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPokemonsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pokemonAllColumns) == len(pokemonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Pokemon{}
	if err = randomize.Struct(seed, o, pokemonDBTypes, true, pokemonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pokemons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pokemonDBTypes, true, pokemonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pokemonAllColumns, pokemonPrimaryKeyColumns) {
		fields = pokemonAllColumns
	} else {
		fields = strmangle.SetComplement(
			pokemonAllColumns,
			pokemonPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PokemonSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPokemonsUpsert(t *testing.T) {
	t.Parallel()

	if len(pokemonAllColumns) == len(pokemonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Pokemon{}
	if err = randomize.Struct(seed, &o, pokemonDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Pokemon: %s", err)
	}

	count, err := Pokemons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pokemonDBTypes, false, pokemonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pokemon struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Pokemon: %s", err)
	}

	count, err = Pokemons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
