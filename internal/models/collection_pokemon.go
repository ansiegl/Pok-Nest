// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CollectionPokemon is an object representing the database table.
type CollectionPokemon struct {
	PokemonID string      `boil:"pokemon_id" json:"pokemon_id" toml:"pokemon_id" yaml:"pokemon_id"`
	UserID    string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Caught    null.Time   `boil:"caught" json:"caught,omitempty" toml:"caught" yaml:"caught,omitempty"`
	Nickname  null.String `boil:"nickname" json:"nickname,omitempty" toml:"nickname" yaml:"nickname,omitempty"`

	R *collectionPokemonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L collectionPokemonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CollectionPokemonColumns = struct {
	PokemonID string
	UserID    string
	Caught    string
	Nickname  string
}{
	PokemonID: "pokemon_id",
	UserID:    "user_id",
	Caught:    "caught",
	Nickname:  "nickname",
}

var CollectionPokemonTableColumns = struct {
	PokemonID string
	UserID    string
	Caught    string
	Nickname  string
}{
	PokemonID: "collection_pokemon.pokemon_id",
	UserID:    "collection_pokemon.user_id",
	Caught:    "collection_pokemon.caught",
	Nickname:  "collection_pokemon.nickname",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CollectionPokemonWhere = struct {
	PokemonID whereHelperstring
	UserID    whereHelperstring
	Caught    whereHelpernull_Time
	Nickname  whereHelpernull_String
}{
	PokemonID: whereHelperstring{field: "\"collection_pokemon\".\"pokemon_id\""},
	UserID:    whereHelperstring{field: "\"collection_pokemon\".\"user_id\""},
	Caught:    whereHelpernull_Time{field: "\"collection_pokemon\".\"caught\""},
	Nickname:  whereHelpernull_String{field: "\"collection_pokemon\".\"nickname\""},
}

// CollectionPokemonRels is where relationship names are stored.
var CollectionPokemonRels = struct {
	Pokemon string
	User    string
}{
	Pokemon: "Pokemon",
	User:    "User",
}

// collectionPokemonR is where relationships are stored.
type collectionPokemonR struct {
	Pokemon *Pokemon `boil:"Pokemon" json:"Pokemon" toml:"Pokemon" yaml:"Pokemon"`
	User    *User    `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*collectionPokemonR) NewStruct() *collectionPokemonR {
	return &collectionPokemonR{}
}

func (r *collectionPokemonR) GetPokemon() *Pokemon {
	if r == nil {
		return nil
	}
	return r.Pokemon
}

func (r *collectionPokemonR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// collectionPokemonL is where Load methods for each relationship are stored.
type collectionPokemonL struct{}

var (
	collectionPokemonAllColumns            = []string{"pokemon_id", "user_id", "caught", "nickname"}
	collectionPokemonColumnsWithoutDefault = []string{"pokemon_id", "user_id"}
	collectionPokemonColumnsWithDefault    = []string{"caught", "nickname"}
	collectionPokemonPrimaryKeyColumns     = []string{"pokemon_id", "user_id"}
	collectionPokemonGeneratedColumns      = []string{}
)

type (
	// CollectionPokemonSlice is an alias for a slice of pointers to CollectionPokemon.
	// This should almost always be used instead of []CollectionPokemon.
	CollectionPokemonSlice []*CollectionPokemon

	collectionPokemonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	collectionPokemonType                 = reflect.TypeOf(&CollectionPokemon{})
	collectionPokemonMapping              = queries.MakeStructMapping(collectionPokemonType)
	collectionPokemonPrimaryKeyMapping, _ = queries.BindMapping(collectionPokemonType, collectionPokemonMapping, collectionPokemonPrimaryKeyColumns)
	collectionPokemonInsertCacheMut       sync.RWMutex
	collectionPokemonInsertCache          = make(map[string]insertCache)
	collectionPokemonUpdateCacheMut       sync.RWMutex
	collectionPokemonUpdateCache          = make(map[string]updateCache)
	collectionPokemonUpsertCacheMut       sync.RWMutex
	collectionPokemonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single collectionPokemon record from the query.
func (q collectionPokemonQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CollectionPokemon, error) {
	o := &CollectionPokemon{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for collection_pokemon")
	}

	return o, nil
}

// All returns all CollectionPokemon records from the query.
func (q collectionPokemonQuery) All(ctx context.Context, exec boil.ContextExecutor) (CollectionPokemonSlice, error) {
	var o []*CollectionPokemon

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CollectionPokemon slice")
	}

	return o, nil
}

// Count returns the count of all CollectionPokemon records in the query.
func (q collectionPokemonQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count collection_pokemon rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q collectionPokemonQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if collection_pokemon exists")
	}

	return count > 0, nil
}

// Pokemon pointed to by the foreign key.
func (o *CollectionPokemon) Pokemon(mods ...qm.QueryMod) pokemonQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"pokemon_id\" = ?", o.PokemonID),
	}

	queryMods = append(queryMods, mods...)

	return Pokemons(queryMods...)
}

// User pointed to by the foreign key.
func (o *CollectionPokemon) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadPokemon allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (collectionPokemonL) LoadPokemon(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCollectionPokemon interface{}, mods queries.Applicator) error {
	var slice []*CollectionPokemon
	var object *CollectionPokemon

	if singular {
		var ok bool
		object, ok = maybeCollectionPokemon.(*CollectionPokemon)
		if !ok {
			object = new(CollectionPokemon)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCollectionPokemon)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCollectionPokemon))
			}
		}
	} else {
		s, ok := maybeCollectionPokemon.(*[]*CollectionPokemon)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCollectionPokemon)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCollectionPokemon))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &collectionPokemonR{}
		}
		args[object.PokemonID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collectionPokemonR{}
			}

			args[obj.PokemonID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`pokemon`),
		qm.WhereIn(`pokemon.pokemon_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pokemon")
	}

	var resultSlice []*Pokemon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pokemon")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pokemon")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pokemon")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pokemon = foreign
		if foreign.R == nil {
			foreign.R = &pokemonR{}
		}
		foreign.R.CollectionPokemons = append(foreign.R.CollectionPokemons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PokemonID == foreign.PokemonID {
				local.R.Pokemon = foreign
				if foreign.R == nil {
					foreign.R = &pokemonR{}
				}
				foreign.R.CollectionPokemons = append(foreign.R.CollectionPokemons, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (collectionPokemonL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCollectionPokemon interface{}, mods queries.Applicator) error {
	var slice []*CollectionPokemon
	var object *CollectionPokemon

	if singular {
		var ok bool
		object, ok = maybeCollectionPokemon.(*CollectionPokemon)
		if !ok {
			object = new(CollectionPokemon)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCollectionPokemon)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCollectionPokemon))
			}
		}
	} else {
		s, ok := maybeCollectionPokemon.(*[]*CollectionPokemon)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCollectionPokemon)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCollectionPokemon))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &collectionPokemonR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collectionPokemonR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CollectionPokemons = append(foreign.R.CollectionPokemons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CollectionPokemons = append(foreign.R.CollectionPokemons, local)
				break
			}
		}
	}

	return nil
}

// SetPokemon of the collectionPokemon to the related item.
// Sets o.R.Pokemon to related.
// Adds o to related.R.CollectionPokemons.
func (o *CollectionPokemon) SetPokemon(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pokemon) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"collection_pokemon\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pokemon_id"}),
		strmangle.WhereClause("\"", "\"", 2, collectionPokemonPrimaryKeyColumns),
	)
	values := []interface{}{related.PokemonID, o.PokemonID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PokemonID = related.PokemonID
	if o.R == nil {
		o.R = &collectionPokemonR{
			Pokemon: related,
		}
	} else {
		o.R.Pokemon = related
	}

	if related.R == nil {
		related.R = &pokemonR{
			CollectionPokemons: CollectionPokemonSlice{o},
		}
	} else {
		related.R.CollectionPokemons = append(related.R.CollectionPokemons, o)
	}

	return nil
}

// SetUser of the collectionPokemon to the related item.
// Sets o.R.User to related.
// Adds o to related.R.CollectionPokemons.
func (o *CollectionPokemon) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"collection_pokemon\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, collectionPokemonPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PokemonID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &collectionPokemonR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			CollectionPokemons: CollectionPokemonSlice{o},
		}
	} else {
		related.R.CollectionPokemons = append(related.R.CollectionPokemons, o)
	}

	return nil
}

// CollectionPokemons retrieves all the records using an executor.
func CollectionPokemons(mods ...qm.QueryMod) collectionPokemonQuery {
	mods = append(mods, qm.From("\"collection_pokemon\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"collection_pokemon\".*"})
	}

	return collectionPokemonQuery{q}
}

// FindCollectionPokemon retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCollectionPokemon(ctx context.Context, exec boil.ContextExecutor, pokemonID string, userID string, selectCols ...string) (*CollectionPokemon, error) {
	collectionPokemonObj := &CollectionPokemon{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"collection_pokemon\" where \"pokemon_id\"=$1 AND \"user_id\"=$2", sel,
	)

	q := queries.Raw(query, pokemonID, userID)

	err := q.Bind(ctx, exec, collectionPokemonObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from collection_pokemon")
	}

	return collectionPokemonObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CollectionPokemon) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no collection_pokemon provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(collectionPokemonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	collectionPokemonInsertCacheMut.RLock()
	cache, cached := collectionPokemonInsertCache[key]
	collectionPokemonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			collectionPokemonAllColumns,
			collectionPokemonColumnsWithDefault,
			collectionPokemonColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(collectionPokemonType, collectionPokemonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(collectionPokemonType, collectionPokemonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"collection_pokemon\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"collection_pokemon\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into collection_pokemon")
	}

	if !cached {
		collectionPokemonInsertCacheMut.Lock()
		collectionPokemonInsertCache[key] = cache
		collectionPokemonInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CollectionPokemon.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CollectionPokemon) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	collectionPokemonUpdateCacheMut.RLock()
	cache, cached := collectionPokemonUpdateCache[key]
	collectionPokemonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			collectionPokemonAllColumns,
			collectionPokemonPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update collection_pokemon, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"collection_pokemon\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, collectionPokemonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(collectionPokemonType, collectionPokemonMapping, append(wl, collectionPokemonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update collection_pokemon row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for collection_pokemon")
	}

	if !cached {
		collectionPokemonUpdateCacheMut.Lock()
		collectionPokemonUpdateCache[key] = cache
		collectionPokemonUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q collectionPokemonQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for collection_pokemon")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for collection_pokemon")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CollectionPokemonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collectionPokemonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"collection_pokemon\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, collectionPokemonPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in collectionPokemon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all collectionPokemon")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CollectionPokemon) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no collection_pokemon provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(collectionPokemonColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	collectionPokemonUpsertCacheMut.RLock()
	cache, cached := collectionPokemonUpsertCache[key]
	collectionPokemonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			collectionPokemonAllColumns,
			collectionPokemonColumnsWithDefault,
			collectionPokemonColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			collectionPokemonAllColumns,
			collectionPokemonPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert collection_pokemon, could not build update column list")
		}

		ret := strmangle.SetComplement(collectionPokemonAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(collectionPokemonPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert collection_pokemon, could not build conflict column list")
			}

			conflict = make([]string, len(collectionPokemonPrimaryKeyColumns))
			copy(conflict, collectionPokemonPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"collection_pokemon\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(collectionPokemonType, collectionPokemonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(collectionPokemonType, collectionPokemonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert collection_pokemon")
	}

	if !cached {
		collectionPokemonUpsertCacheMut.Lock()
		collectionPokemonUpsertCache[key] = cache
		collectionPokemonUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CollectionPokemon record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CollectionPokemon) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CollectionPokemon provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), collectionPokemonPrimaryKeyMapping)
	sql := "DELETE FROM \"collection_pokemon\" WHERE \"pokemon_id\"=$1 AND \"user_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from collection_pokemon")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for collection_pokemon")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q collectionPokemonQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no collectionPokemonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from collection_pokemon")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for collection_pokemon")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CollectionPokemonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collectionPokemonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"collection_pokemon\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, collectionPokemonPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from collectionPokemon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for collection_pokemon")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CollectionPokemon) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCollectionPokemon(ctx, exec, o.PokemonID, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CollectionPokemonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CollectionPokemonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collectionPokemonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"collection_pokemon\".* FROM \"collection_pokemon\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, collectionPokemonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CollectionPokemonSlice")
	}

	*o = slice

	return nil
}

// CollectionPokemonExists checks if the CollectionPokemon row exists.
func CollectionPokemonExists(ctx context.Context, exec boil.ContextExecutor, pokemonID string, userID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"collection_pokemon\" where \"pokemon_id\"=$1 AND \"user_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, pokemonID, userID)
	}
	row := exec.QueryRowContext(ctx, sql, pokemonID, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if collection_pokemon exists")
	}

	return exists, nil
}

// Exists checks if the CollectionPokemon row exists.
func (o *CollectionPokemon) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CollectionPokemonExists(ctx, exec, o.PokemonID, o.UserID)
}
